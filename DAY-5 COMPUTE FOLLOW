
    printf("Enter the number of productions: ");
    scanf("%d", &numOfProductions);
    
    printf("Enter the productions (in the format A=B):\n");
    for(i = 0; i < numOfProductions; i++) {
        scanf("%s", productionSet[i]);
    }

    for(i = 0; i < numOfProductions; i++) {
        char nonTerminal = productionSet[i][0];
        findFirst(nonTerminal, 0, 0);
        strcpy(calcFirst[nonTerminal - 'A'], first);
        first[0] = '\0';
    }

    printf("First sets:\n");
    for(i = 0; i < numOfProductions; i++) {
        char nonTerminal = productionSet[i][0];
        printf("First(%c) = { %s }\n", nonTerminal, calcFirst[nonTerminal - 'A']);
    }

    findFollow(productionSet[0][0]);
    strcpy(calcFollow[productionSet[0][0] - 'A'], follow);
    follow[0] = '\0';

    for(i = 0; i < numOfProductions; i++) {
        char nonTerminal = productionSet[i][0];
        findFollow(nonTerminal);
        strcpy(calcFollow[nonTerminal - 'A'], follow);
        follow[0] = '\0';
    }

    printf("\nFollow sets:\n");
    for(i = 0; i < numOfProductions; i++) {
        char nonTerminal = productionSet[i][0];
        printf("Follow(%c) = { %s }\n", nonTerminal, calcFollow[nonTerminal - 'A']);
    }

    return 0;
}

void findFirst(char c, int q1, int q2) {
    int j;

    if(!(isupper(c))) {
        addToResultSetFirst(c);
        return;
    }

    for(j = 0; j < numOfProductions; j++) {
        if(productionSet[j][0] == c) {
            if(productionSet[j][2] == '#') {
                if(productionSet[q1][q2] == '\0')
                    addToResultSetFirst('#');
                else if(productionSet[q1][q2] != '\0' && (q1 != 0 || q2 != 0)) {
                    findFirst(productionSet[q1][q2], q1, (q2+1));
                }
                else
                    addToResultSetFirst('#');
            }
            else if(!isupper(productionSet[j][2])) {
                addToResultSetFirst(productionSet[j][2]);
            }
            else {
                findFirst(productionSet[j][2], j, 3);
            }
        }
    }
}

void addToResultSetFirst(char c) {
    int i;
    for(i = 0; i <= strlen(first); i++) {
        if(first[i] == c) {
            return;
        }
    }
    first[strlen(first)] = c;
    first[strlen(first) + 1] = '\0';
}

void findFollow(char c) {
    if(follow[0] == '\0') {
        if(productionSet[0][0] == c) {
            addToResultSetFollow('$');
        }
    }
    
    for(int i = 0; i < numOfProductions; i++) {
        for(int j = 2; j < strlen(productionSet[i]); j++) {
            if(productionSet[i][j] == c) {
                if(productionSet[i][j + 1] != '\0') {
                    findFirst(productionSet[i][j + 1], 0, 0);
                    for(int k = 0; k < strlen(first); k++) {
                        if(first[k] != '#') {
                            addToResultSetFollow(first[k]);
                        }
                    }
                }
                
                if(productionSet[i][j + 1] == '\0' || (first[strlen(first) - 1] == '#' && productionSet[i][j + 1] != c)) {
                    findFollow(productionSet[i][0]);
                    for(int k = 0; k < strlen(follow); k++) {
                        addToResultSetFollow(follow[k]);
                    }
                }
            }
        }
    }
}

void addToResultSetFollow(char c) {
    int i;
    for(i = 0; i <= strlen(follow); i++) {
        if(follow[i] == c) {
            return;
        }
    }
    follow[strlen(follow)] = c;
    follow[strlen(follow) + 1] = '\0';
}
